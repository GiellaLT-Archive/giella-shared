! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2020 The University of Tromsø
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

!! !!!Arabic numerals
!  ------------------

!! Arabic numeral expressions can be classified in at least the following categories:
!! ; general numeric expressions: 123 456,789 - note: space as thousand separator, groups of three digits
!! ; accounting numeric expressions: 123.456,789 - note: full stop as thousands separator, groups of three digits
!! ; numeric range expressions: 12-14 - can be dates, times, lengths, masses and other sorts of measurements
!! ; measurements: 123 kg
!! ; dates: 2.4.1999, 4.5., 7.8.02, 04.10.2016
!! ; times: 12:34
!! ; money amounts: kr 1234,56
!! ; temperature: –8°C, 256°K, 100°F

!! The categories we have are:
!! * arabic
!! * roman
!! 
!! Each of these can be subdivided:
!! 
!! !!Roman
!! * dates
!! * general (covers years, pagination, lists, and most other uses) - should
!!   yeares get a category of its own? so that roman numbers below 100 are
!!   anything, whereas above we consider them years?
!! 
!! !!Arabic
!! 
!! * years (four digits in the range 1000-2500?)
!! ** [[Fransa riegádii] 1182:s [[Umbrias Italias.]
!! ** [[almmuhii čakčat] 2009 [[iežas dutkosa]
!! * dates in various formats (we should recognise them all, and tag them):
!! ** borgemánu 31. beaivvi.
!! ** 31.1.
!! ** 31.1.2018
!! * time (in all different formats, tagged)
!! ** 11.00
!! * phone numbers (ideally all international formats, but at least all the nordic ones)
!! ** 018-16 96 00 (Swedish)
!! ** 23081200 (Norwegian)
!! * general, in three different versions: space separated with comma decimal,
!!   punct separated wwith comma decimal, and punct separated with full stop decimal
!! * temperatures - subtype  of general?
!! * fractions (nordic style): **0,99**
!! * plain digits, possibly with thousand separators:
!! ** 7 (miljovnna)
!! ** 16 (jagi)
!! ** (leat sullii) 25 000 (bargi,)
!! * listings:
!! ** 1) some text, 2) another text, etc
!! ** 1. some text, 1.0 some text, 1.1 some text, etc
!! * postal codes, format varies by country - should they be kept in language-specific lexicons?
!! ** 751 70 (Uppsala)
!! ** 0002 [[Oslo]
!! ** 00100 [[Helsingfors]
!! ** N-0106 [[Oslo] - should country codes be encoded, or handled via compounding?
!! * biblical verses, sometimes mistyped using space or comma (or both) instead of colon
!!   between book and verse (do we want to detect and correct these?); NB! - note similarity with times!:
!! ** [[Kor] 5:17
!! ** [[Gal.] 3:27–28
!! ** [[Lukas] 1, 26-38.
!! ** [[Joh.] 13:34
!! ** [[Matt] 28: 18–20
!! ** [[Apg] 2:38
!! ** [[Mos] 1:27–28a
!! ** [[Sál] 103, 13–17
!! ** [[Sál] 139, 1–12.23–24
!! ** [[Joh] 10,14:28–29
!! ** [[Kor] 15,53–57
!! * text section references:
!! ** [[SvPS] 697:2,
!! 
!! All of the above can be both simple values or ranges:@
!! * 2007-2008 (year)
!! * [[Gal.] 3:27–28; [[Lukas] 1, 26-38. (biblical verse)
!! * 0-18 [[jagi.] (age, but really a plain integer range in front of a qualifying noun)
!! 
!! Some but not all of the above can make compounds in compounding languages
!! (obviously compounding and other morphology has to be covered in the
!! language specific continuation lexicons):
!! * 1800-logu (year)
!! 
!! Some but not all of the above can inflect for case in such languages
!! (obviously case inflection and other morphology has to be covered in the
!! language specific continuation lexicons):
!! * 1978:s (year)
!! (Hornberger 1989: 289) - should be analysed as a regular year, not including the colon; this works fine using hfst-tokenise.
!! 
!! We do NOT include measurements, instead  we analyse the measurement abbreviation separately after a general num analysis.
!! 
!! Currency prefixes should be treated as a segment of its own, and not as part of the number. We still to consider prefixes written together with the following number, ie without space.
!! 
!! We do not tag anything in this file, instead we just give continuation lexicons for all different types, so that both tags and possible inflections can be handled on a per language basis. The template file will give suggested tags acccording to the GiellaLT style.

!! And for sure more than these. Previously everything has been more or less
!! lumped together, but to avoid noise and to get better input for grammar
!! checking the ARABICS section should be rewritten such that each category
!! gets its own lexicon. That way it is easier to restrict the syntax of
!! numerical expressions in each category.


LEXICON NUM-PREFIXES   !!≈ !! __@CODE@__
                       !!  This lexicon contains a number of letters and other
                       !!  symbols found in front of digits. Their continuation
                       !!  lexicons should probably be changed as we restructure
                       !!  the arabic numerals.
    §:§      ARABIC ; ! §24
   §§:§§     ARABIC ; ! §§24
  §% :§%     ARABIC ; ! § 24
 §§% :§§%    ARABIC ; ! §§ 24
   %-:%-     ARABIC ; ! -24
   %‒:%‒     ARABIC ; ! -24 U+2012
   %–:%–     ARABIC ; ! -24 U+2013
   %—:%—     ARABIC ; ! -24 U+2014
   %―:%―     ARABIC ; ! -24 U+2015
   %+:%+     ARABIC ; ! <plus>24
 %-% :%-%    ARABIC ; ! - 24
 %‒% :%‒%    ARABIC ; ! - 24 U+2012
 %–% :%–%    ARABIC ; ! - 24 U+2013
 %—% :%—%    ARABIC ; ! - 24 U+2014
 %―% :%―%    ARABIC ; ! - 24 U+2015
 %+% :%+%    ARABIC ; ! <plus> 24
   %*:%*     ARABIC ; ! *24
   %$:%$     ARABIC ; ! $24
   %€:%€     ARABIC ; ! €24
   %<:%[%<%] ARABIC ; ! <24
   %>:%[%>%] ARABIC ; ! >24
  s%.:s%.    ARABIC ; ! s.24

LEXICON ARABICS
            +Use/Circ: ARABIC          ; ! for the arabic numerals
                       ARABICDATE       ; ! for dates
                       ARABICYEAR       ; ! for years
                       ARABICCLOCK       ; ! for time
                       ARABICORD        ; ! for ordinals

LEXICON ARABIC   !!≈ * __@CODE@__ arabic numerals
< [1|2|3|4|5|6|7|8|9|%0] > ARABICLOOPS ;

LEXICON ARABICLOOPS
 ARABICLOOP      ;
 ARABICLOOPCOLL  ;
 ARABICSabcdef ;
! ARABICLOOPORD   ; !vi begrenser til tall opp til 100
! ARABICLOOPphone ; !denne overgenerer
 
 
LEXICON ARABICSabcdef
 < [a|b|c|d|e|f|f %  f] > ACASETAG ;
 
 
LEXICON ARABICDATE
                                      ARABICDATENUM ;
< [1|2|3|%0] [1|2|3|4|5|6|7|8|9|%0] > ARABICDATEDOT ;

LEXICON ARABICDATEDOT
 %.%- ARABICDATENUM ;
   %- ARABICDATENUM ;
 %.%– ARABICDATENUM ;
   %– ARABICDATENUM ;

LEXICON ARABICDATENUM
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %. [%0] [1|2|3|4|5|6|7|8|9] > ARABICDATENUM2 ; !29.09
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %. [1]  [1|2|%0]            > ARABICDATENUM2 ; !29.10
 < [3]      [1|%0]                 %. [%0] [1|2|3|4|5|6|7|8|9] > ARABICDATENUM2 ; !31.09
 < [3]      [1|%0]                 %. [1]  [1|2|%0]            > ARABICDATENUM2 ; !31.10
 <            [1|2|3|4|5|6|7|8|9]  %.      [1|2|3|4|5|6|7|8|9] > ARABICDATENUM2 ; !9.9
 <            [1|2|3|4|5|6|7|8|9]  %. [1]  [1|2|%0]            > ARABICDATENUM2 ; !9.10
 < [1|2]    [1|2|3|4|5|6|7|8|9|%0] %.      [1|2|3|4|5|6|7|8|9] > ARABICDATENUM2 ; !29.9
 < [1|2]    [1|2|3|4|5|6|7|8|9|%0] %. [1]  [1|2|%0]            > ARABICDATENUM2 ; !29.10
 < [3]      [1|%0]                 %.      [1|2|3|4|5|6|7|8|9] > ARABICDATENUM2 ; !31.9
 < [3]      [1|%0]                 %. [1]  [1|2|%0]            > ARABICDATENUM2 ; !31.10

LEXICON ARABICDATENUM2
 < %. [1|2] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > datetag       ;
                              < %. [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > datetag       ;
                                                                                   datetag_w_dot ;

LEXICON datetag
 +Num+Sem/Date: dateyearcase ;


LEXICON datetag_w_dot
 +Num+Sem/Date: datetag_w_dot_cont ;

LEXICON datetag_w_dot_cont
 dateyearcase_nullsuff_w_dot ;
 dateyearcase_fullsuff       ;
 MARKDOT                     ;

LEXICON ARABICCLOCK
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %. [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > CLOCK-sep ;
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %: [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > CLOCK-sep ;
 <   [1|2|3|4|5|6|7|8|9|%0] %. [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > CLOCK-sep ;
 <   [1|2|3|4|5|6|7|8|9|%0] %: [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > CLOCK-sep ;
 
LEXICON CLOCK-sep
   %- ARABICCLOCK2 ;
   %– ARABICCLOCK2 ;
   numclock ;

LEXICON ARABICCLOCK2
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %. [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > numclock ;
 < [1|2|%0] [1|2|3|4|5|6|7|8|9|%0] %: [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > numclock ;
 <   [1|2|3|4|5|6|7|8|9|%0] %. [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > numclock ;
 <   [1|2|3|4|5|6|7|8|9|%0] %: [1|2|3|4|5|%0] [1|2|3|4|5|6|7|8|9|%0] > numclock ;


LEXICON numclock
 +Num+Sem/Time-clock: dateyearcase ; !foreløpig


LEXICON ARABICYEAR
 < [1|2] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > numyear ;

LEXICON numyear
       yeartag  ;
 %/:%/ moreyear ;
 %-:%- moreyear ;
 %–:%– moreyear ;

LEXICON moreyear
                              < [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > yeartagpl ;
 < [1|2] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > yeartagpl ;


LEXICON ARABICORD
 < [1|2|3|4|5|6|7|8|9|%0] [1|2|3|4|5|6|7|8|9|%0] > ARABICLOOPORD ;
                       < [1|2|3|4|5|6|7|8|9]    > ARABICLOOPORD ;
                                          1%0%0   ARABICLOOPORD ;


!LEXICON ARABICLOOPphone      +358(0)16671254, 01-16671254, 166 71 254
! + ARABICLOOPphoneNum ;   ! 
!   ARABICLOOPphoneNum ;

!LEXICON ARABICLOOPphoneNum    +358(0)16671254, 01-16671254, 166 71 254
!< [1|2|3|4|5|6|7|8|9|%0] > ARABICLOOPphoneNum ;
!< [1|2|3|4|5|6|7|8|9|%0] > ARABICLOOPphoneSep ;
!< [1|2|3|4|5|6|7|8|9|%0] > ARABICCASEphone ;
!
!LEXICON ARABICLOOPphoneSep     +358(0)16671254, 01-16671254, 166 71 254
!  (                      ARABICLOOPphoneNum ;
!  )                      ARABICLOOPphoneNum ;
!  —                      ARABICLOOPphoneNum ; 
! %-                      ARABICLOOPphoneNum ; 
! %                       ARABICLOOPphoneNum ; ! Space as separator

!LEXICON ARABICCASEphone  
! +Num+Sem/Phonenr+Sg+Nom: # ;
! +Num+Sem/Phonenr+Sg+Acc: # ;

LEXICON ARABICLOOP   !!≈ * __@CODE@__
                           ARABIC          ;
               %-:%-       ARABIC          ; ! 1-2 multipart numbers
               %–:%–       ARABIC          ; ! 1–2 multipart numbers
               %—:%—       ARABIC          ; ! 1—2 multipart numbers
             %.%-:%.%-     ARABIC          ; ! 1.-2 multipart numbers ! !
             %.%–:%.%–     ARABIC          ; ! 1.–2 multipart numbers ! !
             %.%—:%.%—     ARABIC          ; ! 1.—2 multipart numbers ! !
             %.%-:%.%-     ARABICORD          ; ! 1.-2. multipart numbers ! !
             %.%–:%.%–     ARABICORD          ; ! 1.–2. multipart numbers ! !
             %.%—:%.%—     ARABICORD          ; ! 1.—2. multipart numbers ! !
             %-% :%-%      ARABIC          ; ! 1- 2 multipart numbers
             %–% :%–%      ARABIC          ; ! 1– 2 multipart numbers
             %—% :%—%      ARABIC          ; ! 1— 2 multipart numbers
             % %-:% %-     ARABIC          ; ! 1 -2 multipart numbers
             % %–:% %–     ARABIC          ; ! 1 –2 multipart numbers
             % %—:% %—     ARABIC          ; ! 1 —2 multipart numbers
           % %-% :% %-%    ARABIC          ; ! 1 - 2 multipart numbers
           % %–% :% %–%    ARABIC          ; ! 1 – 2 multipart numbers
           % %—% :% %—%    ARABIC          ; ! 1 — 2 multipart numbers
         % %-%-% :% %-%-%  ARABIC          ; ! 1 -- 2 multipart numbers
         % %–%–% :% %–%–%  ARABIC          ; ! 1 –– 2 multipart numbers
         % %—%—% :% %—%—%  ARABIC          ; ! 1 —— 2 multipart numbers
               %.:%.       ARABIC          ;
               %::%:       ARABIC          ;
               %,:%,       ARABIC          ;
               % :%        ARABIC          ; ! Allowing for "23 500". Lene: Denne er plagsom og bør forbedres. F.eks. 2017 30 vil vi ikke ha om ett tall.
                 :         ARABIC          ; ! Allowing for "23 500" w/nbsp (init char = alt-space)
               %/:%/       ARABIC          ; ! 24/12
             %/% :%/%      ARABIC          ; ! 24/ 12
             % %/:% %/     ARABIC          ; ! 24 /12
                ':'7       ARABIC          ; ! Since ' denotes cons.grad. This is not optimal either.

             +Num:         RNum            ; ! Num Cmp Noun, with hyphen

          ,%-+Num:,%-      ARABICCASES     ; ! 10,-
 ,%-+Num+Err/Orth:.%-      ARABICCASES     ; ! 10.- It is wrong, but written.
!    % %-+Err/Orth:% %-     ARABICDELIMITER ; ! 1 - multipart numbers - "1 -:s"?
!  % %-%-+Err/Orth:% %-%-   ARABICDELIMITER ; ! 1 -- multipart numbers
               %%:%%       ARABICDELIMITER ; ! 50%. It is wrong, but 75 % of us write "75%".
             % %%:% %%     ARABICDELIMITER ; ! the correct ones as well... 50 % etc.
                           ARABICDELIMITER ; ! list of number-case delimiters

LEXICON ARABICLOOPORD   !!≈ * __@CODE@__ ordinals
 +A+Ord+Attr: MARKDOT ;
! +Num+Arab+Sg+Nom#%.%<sent%>:%. # ; !for Apertium bz. 22
 +A+Ord+Use/Circ: ARABICDELIMITERORD ;

LEXICON ACASETAG   !!≈ * __@CODE@__  is for 1e+Num+Sg+Num:1e
+Num: ARABICCASE0 ;
+Num:%: ARABICCASE ;

LEXICON ARABICLOOPCOLL   !!≈ * __@CODE@__ collectives
 +N+Coll+Use/Circ: ARABICDELIMITERCOLL ;


LEXICON ARABICDELIMITER   !!≈ * __@CODE@__  blank + 3 delim, what does the lg counc prefer?
 +Num:            ARABICCASE0      ; ! This is the 1984 case, ie NGA
 +Num:%:          ARABICCASE       ; ! This is the 1984:s case.
 +Num+Err/Orth:   ARABICCASE       ; ! This is the 1984s case.
 +Num+Err/Orth:'7 ARABICCASE       ; ! This is the 1984's case.
 +Num+Err/Orth:’  ARABICCASE       ; ! optio-B07 = ’
 +Num+Err/Orth:%- ARABICCASE       ; ! This is the 1984-s case.
 +Num+Err/Orth:´  ARABICCASE       ; ! This is the 1984´s case.
 +Num:            ARABICCOMPOUNDS ; ! 6-jáhkasaš, 


LEXICON ARABICDELIMITERORD   !!≈ * __@CODE@__ ordinals
!             ARABICCASE0   ; ! This is the 1984 case, ie NGA
          :%: ARABICCASEORD ; ! This is the 1984:s case.
 +Err/Orth:   ARABICCASEORD ; ! This is the 1984s case.
 +Err/Orth:'7 ARABICCASEORD ; ! This is the 1984's case.
 +Err/Orth:%- ARABICCASEORD ; ! This is the 1984-s case.

LEXICON ARABICDELIMITERCOLL   !!≈ * __@CODE@__ collectives
!             ARABICCASE0    ; ! This is the 1984 case, ie NGA
          :%: ARABICCASECOLL ; ! This is the 1984:s case.
 +Err/Orth:   ARABICCASECOLL ; ! This is the 1984s case.
 +Err/Orth:'7 ARABICCASECOLL ; ! This is the 1984's case.
 +Err/Orth:%- ARABICCASECOLL ; ! This is the 1984-s case.


LEXICON MARKDOT
! This should create a new backtrack-point before the dot, but no sub-reading:                                                                                                                          
   +Use/-PMatch:%. # ;
< "+Use/PMatch":0 "@P.Pmatch.Backtrack@" 0:%. > # ; ! This creates a split point                                                                                                         



! The Roman numerals !
! ------------------ !

LEXICON ROMAN   !!≈ * __@CODE@__  roman numerals
 +Use/Circ: ROM-THOUSAND ; !
 +Use/Circ: ROM-HUNDRED ; !
 +Use/Circ: ROM-TEN ; !
 +Use/Circ: ROM-ONE ; !

LEXICON ROM-THOUSAND   !!≈ * __@CODE@__
     M+Use/Circ:M     ROM-THOUSAND-TAG ;
    MM+Use/Circ:MM    ROM-THOUSAND-TAG ;
   MMM+Use/Circ:MMM   ROM-THOUSAND-TAG ;
  MMMM+Use/Circ:MMMM  ROM-THOUSAND-TAG ;
 MMMMM+Use/Circ:MMMMM ROM-THOUSAND-TAG ;

LEXICON ROM-THOUSAND-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG   ; !
 +Use/Circ: ROM-HUNDRED ; !
 +Use/Circ: ROM-TEN     ; !
 +Use/Circ: ROM-ONE     ; !
 +Use/Circ: ROM-SPLIT   ; !

LEXICON ROM-HUNDRED   !!≈ * __@CODE@__
    C+Use/Circ:C    ROM-HUNDRED-TAG ;
   CC+Use/Circ:CC   ROM-HUNDRED-TAG ;
  CCC+Use/Circ:CCC  ROM-HUNDRED-TAG ;
   CD+Use/Circ:CD   ROM-HUNDRED-TAG ;
    D+Use/Circ:D    ROM-HUNDRED-TAG ;
   DC+Use/Circ:DC   ROM-HUNDRED-TAG ;
  DCC+Use/Circ:DCC  ROM-HUNDRED-TAG ;
 DCCC+Use/Circ:DCCC ROM-HUNDRED-TAG ;
   CM+Use/Circ:CM   ROM-HUNDRED-TAG ;

LEXICON ROM-HUNDRED-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG ;
 +Use/Circ: ROM-TEN   ;
 +Use/Circ: ROM-ONE   ;
 +Use/Circ: ROM-SPLIT ;

LEXICON ROM-TEN   !!≈ * __@CODE@__
    X+Use/Circ:X    ROM-TEN-TAG ;
   XX+Use/Circ:XX   ROM-TEN-TAG ;
  XXX+Use/Circ:XXX  ROM-TEN-TAG ;
   XL+Use/Circ:XL   ROM-TEN-TAG ;
    L+Use/Circ:L    ROM-TEN-TAG ;
   LX+Use/Circ:LX   ROM-TEN-TAG ;
  LXX+Use/Circ:LXX  ROM-TEN-TAG ;
 LXXX+Use/Circ:LXXX ROM-TEN-TAG ;
   XC+Use/Circ:XC   ROM-TEN-TAG ;

LEXICON ROM-TEN-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG ;
 +Use/Circ: ROM-ONE   ;
 +Use/Circ: ROM-SPLIT ;

LEXICON ROM-ONE   !!≈ * __@CODE@__
    I+Use/Circ:I    ROM-ONE-TAG ;
   II+Use/Circ:II   ROM-ONE-TAG ;
  III+Use/Circ:III  ROM-ONE-TAG ;
   IV+Use/Circ:IV   ROM-ONE-TAG ;
    V+Use/Circ:V    ROM-ONE-TAG ;
   VI+Use/Circ:VI   ROM-ONE-TAG ;
  VII+Use/Circ:VII  ROM-ONE-TAG ;
 VIII+Use/Circ:VIII ROM-ONE-TAG ;
   IX+Use/Circ:IX   ROM-ONE-TAG ;

LEXICON ROM-ONE-TAG   !!≈ * __@CODE@__
  +Use/Circ: ROMNUMTAG ;
!        +N: ROMNUMTAG ; ! !The Olav viđeš fix (Roman V now gets A)
  +Use/Circ: ROM-SPLIT ;

! Here, we split the Roman numerals, in order to account for cases like
! "Kapihtal II-IV". We may send this first part directly to ROM-TAG below (and
! get the +Num tag), or we may send them through a second loop, identical to
! the first one, but marked wit "2" (the lexica are called 2ROMAN, etc. We do
! this instead of making a loop, since we do not want cases like
! "II-IV-VI-VII-IX". If that should turn out to be a good idea, a loop would
! do the trick.

LEXICON ROM-SPLIT   !!≈ * __@CODE@__
 +Use/Circ:%- 2ROMAN ; ! II-VI, etc. !


! Here goes loop 2.

LEXICON 2ROMAN   !!≈ * __@CODE@__
 +Use/Circ: 2ROM-THOUSAND ;
 +Use/Circ: 2ROM-HUNDRED  ;
 +Use/Circ: 2ROM-TEN      ;
 +Use/Circ: 2ROM-ONE      ;

LEXICON 2ROM-THOUSAND   !!≈ * __@CODE@__
     M+Use/Circ:M     2ROM-THOUSAND-TAG ;
    MM+Use/Circ:MM    2ROM-THOUSAND-TAG ;
   MMM+Use/Circ:MMM   2ROM-THOUSAND-TAG ;
  MMMM+Use/Circ:MMMM  2ROM-THOUSAND-TAG ;
 MMMMM+Use/Circ:MMMMM 2ROM-THOUSAND-TAG ;

LEXICON 2ROM-THOUSAND-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG    ;
 +Use/Circ: 2ROM-HUNDRED ;
 +Use/Circ: 2ROM-TEN     ;
 +Use/Circ: 2ROM-ONE     ;

LEXICON 2ROM-HUNDRED   !!≈ * __@CODE@__
    C+Use/Circ:C    2ROM-HUNDRED-TAG ;
   CC+Use/Circ:CC   2ROM-HUNDRED-TAG ;
  CCC+Use/Circ:CCC  2ROM-HUNDRED-TAG ;
   CD+Use/Circ:CD   2ROM-HUNDRED-TAG ;
    D+Use/Circ:D    2ROM-HUNDRED-TAG ;
   DC+Use/Circ:DC   2ROM-HUNDRED-TAG ;
  DCC+Use/Circ:DCC  2ROM-HUNDRED-TAG ;
 DCCC+Use/Circ:DCCC 2ROM-HUNDRED-TAG ;
   CM+Use/Circ:CM   2ROM-HUNDRED-TAG ;

LEXICON 2ROM-HUNDRED-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG ;
 +Use/Circ: 2ROM-TEN  ;
 +Use/Circ: 2ROM-ONE  ;

LEXICON 2ROM-TEN   !!≈ * __@CODE@__
    X+Use/Circ:X    2ROM-TEN-TAG ;
   XX+Use/Circ:XX   2ROM-TEN-TAG ;
  XXX+Use/Circ:XXX  2ROM-TEN-TAG ;
   XL+Use/Circ:XL   2ROM-TEN-TAG ;
    L+Use/Circ:L    2ROM-TEN-TAG ;
   LX+Use/Circ:LX   2ROM-TEN-TAG ;
  LXX+Use/Circ:LXX  2ROM-TEN-TAG ;
 LXXX+Use/Circ:LXXX 2ROM-TEN-TAG ;
   XC+Use/Circ:XC   2ROM-TEN-TAG ;

LEXICON 2ROM-TEN-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG ;
 +Use/Circ: 2ROM-ONE  ;

LEXICON 2ROM-ONE   !!≈ * __@CODE@__
    I+Use/Circ:I    2ROM-ONE-TAG ;
   II+Use/Circ:II   2ROM-ONE-TAG ;
  III+Use/Circ:III  2ROM-ONE-TAG ;
   IV+Use/Circ:IV   2ROM-ONE-TAG ;
    V+Use/Circ:V    2ROM-ONE-TAG ;
   VI+Use/Circ:VI   2ROM-ONE-TAG ;
  VII+Use/Circ:VII  2ROM-ONE-TAG ;
 VIII+Use/Circ:VIII 2ROM-ONE-TAG ;
   IX+Use/Circ:IX   2ROM-ONE-TAG ;

LEXICON 2ROM-ONE-TAG   !!≈ * __@CODE@__
 +Use/Circ: ROMNUMTAG ;

LEXICON ROMNUMTAG   !!≈ * __@CODE@__
  +Num+Rom+Sg+Nom+Use/Circ:   #            ;
!     +Num+Sg+Gen+Use/Circ:   #            ;
!     +Num+Sg+Acc+Use/Circ:   #            ;
    +A+Rom+Ord+Sg+Use/Circ:%. #            ; ! !III. as ordinal.
    +A+Rom+Ord+Sg+Use/Circ:   #            ; ! !Looking for trouble...
             +Num+Use/Circ:%: ROMNUMTAGOBL ;
    +Num+Use/Circ+Err/Orth:'7 ROMNUMTAGOBL ;
    +Num+Use/Circ+Err/Orth:%- ROMNUMTAGOBL ;
    +Num+Use/Circ+Err/Orth:%´ ROMNUMTAGOBL ;
!                     +Num:   ROMNUMTAGOBL ;



! A final section with some isolated numeral expresssions !
! ------------------------------------------------------- !

LEXICON ISOLATED-NUMEXP   !!≈ * __@CODE@__ some isolated numeral expressions
           ½+Num:½   # ;
           ¹+Num:¹   # ;
           ²+Num:²   # ;
           ³+Num:³   # ;
           ¼+Num:¼   # ;
           ¾+Num:¾   # ;



LEXICON yeartag
 +Num+Sem/Year: dateyearcase ;




